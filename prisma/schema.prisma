// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  DEV
  TESTER
  USER_MANAGER
  USER_MARKETING
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  lolaParentId  String?         // Added field for LOLA_USER_ID tracking
  role UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  // sessions      Session[]
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubUser {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  lolaParentId  String?         // Added field for LOLA_USER_ID tracking
  role UserRole @default(USER)
  // sessions      Session[]
  // Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
 
  @@unique([email, token])
}

model PasswordResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String   @db.ObjectId
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])

}

// model Authenticator {
//   credentialID         String  @id @map("_id")
//   userId               String  @db.ObjectId
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?
 
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   @@unique([userId, credentialID])
// }

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }